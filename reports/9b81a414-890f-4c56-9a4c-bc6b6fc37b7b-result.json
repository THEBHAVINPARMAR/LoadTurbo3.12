{"name": "test_login_parallel[59]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: DevToolsActivePort file doesn't exist\nStacktrace:\n\tGetHandleVerifier [0x00007FF6EB13CF45+75717]\n\tGetHandleVerifier [0x00007FF6EB13CFA0+75808]\n\t(No symbol) [0x00007FF6EAF08F9A]\n\t(No symbol) [0x00007FF6EAF4B9D9]\n\t(No symbol) [0x00007FF6EAF46759]\n\t(No symbol) [0x00007FF6EAF41ADD]\n\t(No symbol) [0x00007FF6EAF952D8]\n\t(No symbol) [0x00007FF6EAF948B0]\n\t(No symbol) [0x00007FF6EAF87153]\n\t(No symbol) [0x00007FF6EAF50421]\n\t(No symbol) [0x00007FF6EAF511B3]\n\tGetHandleVerifier [0x00007FF6EB43D71D+3223453]\n\tGetHandleVerifier [0x00007FF6EB437CC2+3200322]\n\tGetHandleVerifier [0x00007FF6EB455AF3+3322739]\n\tGetHandleVerifier [0x00007FF6EB156A1A+180890]\n\tGetHandleVerifier [0x00007FF6EB15E11F+211359]\n\tGetHandleVerifier [0x00007FF6EB145294+109332]\n\tGetHandleVerifier [0x00007FF6EB145442+109762]\n\tGetHandleVerifier [0x00007FF6EB12BA59+4825]\n\tBaseThreadInitThunk [0x00007FF876F5E8D7+23]\n\tRtlUserThreadStart [0x00007FF878ADC5DC+44]", "trace": "@pytest.fixture(scope=\"function\")\n    def driver():\n        chrome_driver_path = r\"C:\\DRIVERS\\chromedriver-win64\\chromedriver.exe\"\n    \n        if not os.path.exists(chrome_driver_path):\n            raise FileNotFoundError(f\"❌ ChromeDriver not found at: {chrome_driver_path}\")\n    \n        print(f\"✅ ChromeDriver found at: {chrome_driver_path}\")\n    \n        options = webdriver.ChromeOptions()\n        options.add_argument(\"--start-maximized\")\n    \n        service = Service(executable_path=chrome_driver_path)\n>       driver = webdriver.Chrome(service=service, options=options)\n\nconftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:67: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:260: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002983FBD03E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: DevToolsActivePort f...EB12BA59+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF876F5E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF878ADC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: DevToolsActivePort file doesn't exist\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6EB13CF45+75717]\nE       \tGetHandleVerifier [0x00007FF6EB13CFA0+75808]\nE       \t(No symbol) [0x00007FF6EAF08F9A]\nE       \t(No symbol) [0x00007FF6EAF4B9D9]\nE       \t(No symbol) [0x00007FF6EAF46759]\nE       \t(No symbol) [0x00007FF6EAF41ADD]\nE       \t(No symbol) [0x00007FF6EAF952D8]\nE       \t(No symbol) [0x00007FF6EAF948B0]\nE       \t(No symbol) [0x00007FF6EAF87153]\nE       \t(No symbol) [0x00007FF6EAF50421]\nE       \t(No symbol) [0x00007FF6EAF511B3]\nE       \tGetHandleVerifier [0x00007FF6EB43D71D+3223453]\nE       \tGetHandleVerifier [0x00007FF6EB437CC2+3200322]\nE       \tGetHandleVerifier [0x00007FF6EB455AF3+3322739]\nE       \tGetHandleVerifier [0x00007FF6EB156A1A+180890]\nE       \tGetHandleVerifier [0x00007FF6EB15E11F+211359]\nE       \tGetHandleVerifier [0x00007FF6EB145294+109332]\nE       \tGetHandleVerifier [0x00007FF6EB145442+109762]\nE       \tGetHandleVerifier [0x00007FF6EB12BA59+4825]\nE       \tBaseThreadInitThunk [0x00007FF876F5E8D7+23]\nE       \tRtlUserThreadStart [0x00007FF878ADC5DC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "attachments": [{"name": "stdout", "source": "372d9433-e8e4-4a77-b55d-9c92188c74e9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "user", "value": "59"}], "start": 1747846665666, "stop": 1747846665666, "uuid": "450c9641-7ca4-445e-b593-f357f02a2442", "historyId": "672ebc3ded793ab61e50b93a4950a282", "testCaseId": "bdfc05f17f1e5652113f2962afbf46d2", "fullName": "tests.test_login#test_login_parallel", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "MAHADEV"}, {"name": "thread", "value": "20484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}